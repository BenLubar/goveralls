[{"name":"goveralls-test/main.go","source":"package main\n\nimport (\n\u0009\"fmt\"\n)\n\nvar ErrNotSix = fmt.Errorf(\"The number is DEFINITELY not six.\")\n\nfunc main() {\n\u0009fmt.Printf(\"Give me a number: \")\n\u0009var n int\n\u0009fmt.Scanf(\"%d\", \u0026n)\n\n\u0009fmt.Println(FormatIsSix(n))\n}\n\nvar numbers_that_are_six []bool\n\nfunc init() {\n\u0009for i := 0; i \u003c 10; i++ {\n\u0009\u0009numbers_that_are_six = append(numbers_that_are_six, i == 6)\n\u0009}\n}\n\nfunc EndsWithSix(n int) (bool, error) {\n\u0009return IsSix(n % 10)\n}\n\nfunc IsSix(n int) (bool, error) {\n\u0009if n \u003c 0 || n \u003e= len(numbers_that_are_six) {\n\u0009\u0009return false, ErrNotSix\n\u0009}\n\u0009return numbers_that_are_six[n], nil\n}\n\nfunc FormatIsSix(n int) string {\n\u0009if ok, err := EndsWithSix(n); ok {\n\u0009\u0009return fmt.Sprintf(\"The number %d ends with six.\\n\", n)\n\u0009} else if err == nil {\n\u0009\u0009return fmt.Sprintf(\"The number %d does NOT end with six.\\n\", n)\n\u0009} else {\n\u0009\u0009return fmt.Sprintf(\"The number %d gave an error: %v\\n\", n, err)\n\u0009}\n}\n","coverage":[null,null,null,null,null,null,null,null,null,0,0,0,null,0,null,null,null,null,null,1,1,null,null,null,null,1,null,null,null,1,0,null,1,null,null,null,0,0,null,0,null,0,null,null,null]}]